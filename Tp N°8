1)Funciones y procedimientos:
A) En C++, tanto las funciones como los procedimientosson bloques de código reutilizables, pero la principal diferencia es que una función devuelve un valor, mientras que un procedimiento no.
B) Una función se utiliza cuando se necesita que el código devuelva un resultado y un procedimiento se utiliza cuando solo se ejecutan acciones sin necesidad de retornar un valor.

2) Los componentes básicos de una función en C++ son:
1. Tipo de retorno: Especifíca qué tipo de valor devuelve la función (int, float, void, etc.).
2.	Nombre de la función: Identificador que permite invocar a la función.
3.	Parámetros: Opcionales; datos que se pasan a la función para su procesamiento.
4.	Cuerpo de la función: Código que se ejecuta cuando se llama a la función.
5.	Valor de retorno (opcional): Si la función tiene un tipo de retorno distinto de void, debe devolver un valor.

3)Arreglo de caracteres: Es un conjunto de caracteres almacenados en posiciones consecutivas de memoria. Es una implementación básica y de bajo nivel de cadenas.

Tipo de dato string: Es una clase en C++ que proporciona métodos y características avanzadas para manejar cadenas de caracteres, como el uso dinámico de memoria y una variedad de funciones para manipular cadenas.

4) 
| Método/Operador  | Descripción                                                                             | Ejemplo de Uso |
|----------------------|----------------------------------------------------------------------------------------------|--------------------|
| `max_size`           | Retorna el tamaño máximo que puede tener el string                                            | `str.max_size();`   |
| `compare`            | Compara dos strings y retorna un valor para indicar la relación de orden                      | `str.compare("abc");`|
| `copy`               | Copia el contenido del string en un arreglo de caracteres                                     | `str.copy(arr, 5);`|
| `c_str`              | Retorna un puntero al arreglo de caracteres que representa el contenido del string            | `str.c_str();`      |
| `data`               | Similar a `c_str`, retorna el contenido como un puntero a char                                | `str.data();`       |
| `empty`              | Verifica si el string está vacío                                                             | `str.empty();`      |
| `erase`              | Elimina caracteres o un rango de caracteres del string                                        | `str.erase(0, 3);`  |
| `find`               | Busca la primera aparición de un carácter o substring                                         | `str.find("abc");`  |
| `find_last_of`       | Encuentra la última aparición de un carácter de una lista de caracteres                       | `str.find_last_of("abc");` |
| `front`              | Retorna una referencia al primer carácter del string                                          | `char c = str.front();` |
| `insert`             | Inserta caracteres en una posición específica                                                 | `str.insert(0, "Hola ");` |
| `replace`            | Reemplaza un rango de caracteres con otro string                                              | `str.replace(0, 4, "Adios");` |
| `reserve`            | Reserva espacio de memoria para el string                                                     | `str.reserve(100);` |
| `resize`             | Cambia el tamaño del string, agregando o eliminando caracteres                                | `str.resize(5);`    |
| `substr`             | Retorna un substring desde una posición específica                                            | `str.substr(0, 4);` |
| `swap`               | Intercambia el contenido de dos strings                                                       | `str1.swap(str2);`  |
 
5) Un vector en C++ es un contenedor dinámico que puede cambiar de tamaño automáticamente cuando se insertan o eliminan elementos. Forma parte de la biblioteca estándar (STL) y ofrece acceso rápido a los elementos por índice.

Características:

•	Almacenamiento dinámico de datos.

•	Acceso rápido a los elementos mediante índices.

•	Se ajusta automáticamente en tamaño cuando se agregan o eliminan elementos.

B) vector<int> vec;            // Vector vacío

vector<int> vec(5);         // Vector con 5 elementos inicializados en 0

vector<int> vec = {1, 2, 3}; // Vector inicializado con valores

6) se puede modificar con el metodo resize()

vector<int> vec(5);  // Vector con 5 elementos

vec.resize(10);           // Cambia el tamaño a 10 elementos

7) Acceder a un elemento fuera del rango del vector puede causar un comportamiento indefinido. Es recomendable usar el método at() que lanza una excepción si el índice está fuera de rango:

8) La clase vector proporciona una serie de funcionalidades como:

Agregar o eliminar elementos.
Acceso rápido a elementos por índice.
Redimensionar automáticamente.
Métodos como push_back(), pop_back(), size(), capacity(), entre otros.

9)
| Método.                         | Descripción                                                | Ejemplo                                                      |
|---------------------------------|------------------------------------------------------------|--------------------------------------------------------------|
| `size()`                        | Obtiene el tamaño del vector                               | `vec.size();`                                                |
| `capacity()`                    | Obtiene la capacidad actual del vector                     | `vec.capacity();`                                            |
| `empty()`                       | Verifica si el vector está vacío                           | `vec.empty();`                                               |
| `push_back(valor)`              | Añade un elemento al final                                 | `vec.push_back(10);`                                         |
| `pop_back()`                    | Elimina el último elemento                                 | `vec.pop_back();`                                            |
| `front()`                       | Devuelve una referencia al primer elemento                 | `vec.front();`                                               |
| `back()`                        | Devuelve una referencia al último elemento                 | `vec.back();`                                                |
| `at(posición)`                  | Devuelve una referencia al elemento en la posición         | `vec.at(2);`                                                 |
| `assign(inicio, fin)`           | Reemplaza el contenido con un rango de elementos           | `vec.assign(otro_vec.begin(), otro_vec.end());`              |
| `erase(posición)`               | Elimina el elemento en la posición especificada            | `vec.erase(vec.begin() + 2);`                                |
| `erase(inicio, fin)`            | Elimina un rango de elementos                              | `vec.erase(vec.begin(), vec.begin() + 3);`                   |
| `insert(posición, valor)`       | Inserta un elemento en la posición especificada            | `vec.insert(vec.begin() + 2, 20);`                           |
| `insert(posición, inicio, fin)` | Inserta un rango de elementos en una posición              | `vec.insert(vec.begin(), otro_vec.begin(), otro_vec.end());` |
| `clear()`                       | Elimina todos los elementos del vector                     | `vec.clear();`                                               |
| `swap(otro_vector)`             | Intercambia el contenido de dos vectores                   | `vec1.swap(vec2);`                                           |


10)
A) Una clase en C++ es una plantilla o un modelo para crear objetos. Define tanto los atributos (datos) como los métodos (funcionalidades) que los objetos creados a partir de esa clase tendrán. Es un pilar fundamental de la Programación Orientada a Objetos (POO), que busca modelar entidades del mundo real en el código.
Estructura:
class Persona {
    private:
       string nombre;
        int edad;
    public:
        Persona(string _nombre, int _edad) {
            nombre = _nombre;
            edad = _edad;
        }
        string obtenerNombre() {
            return nombre;
        }
        int obtenerEdad() {
            return edad;
        }
        void mostrarInformacion() {

            cout << "Nombre: " << nombre << ", Edad: " << edad << endl;
        }

};

B) Un objeto es una instancia de una clase. Mientras que la clase es el molde o plano, un objeto es el resultado tangible creado a partir de ese plano. Los objetos tienen los atributos y comportamientos definidos por la clase y el propósito de un objeto es representar una entidad específica del mundo real o del dominio del problema que se está modelando en el código. Cada objeto tiene su propio estado (valores únicos de sus atributos) y puede ejecutar acciones definidas por sus métodos.
